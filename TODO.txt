UI-Plus-Guts
------------

- Import/export from folder contents view.

- Add Undo tab to Site (or per folder?) which will allow admins to undo recent
  transactions.  Implied: add transaction notes to all transactions.

- Stamp created objects with creator information?

- Allow reordering of resources in folder contents view when the folder is
  ordered.

- Batching in large folders.

Guts-Only
---------

- Decide whether to split "manage contents" permissions out for folders into
  add, delete, rename.

- Catalog event subscriber currently does a hellishly expensive recatalog of
  allowed indexes when an ACL is changed.  Not sure if there's even a general
  way to make this do less work, but could be.

- Undo of catalog reindex doesnt?  Turned off for now.

- Refactor ACL view.

- Add specific configurator directives for object event registrations
  (e.g. config.subscribe_modified).

- __viewable__, __renameable__, __deletable__, __copyable__, __duplicatable__
  attributes of contained objects in folder contents view that controls
  how contained object can be acted upon?  E.g.::

    def __viewable__(self, context, request):
        return has_permission('sdi.view', context, request)

- How to prevent objects from being moved or duplicated into a place where
  they're not addable?

- Fix ``Batch`` such that seqlen is a maximum.  Rationale: the sequence that
  the batch receives may be smaller than seqlen due to hidden objects in
  folder contents view.

- Ditch the Zope event system (in particular, ditch "registry.registerHandler"
  used by config.add_subscriber as well as registry.subscribers used by
  registry.notify).  Come up with an alternate event subscription and
  notification system which ensures that subscribers receive only the event
  object, and senders need send only the event object, even if under the hood
  other adaptations are done to find the right subscribers. A bonus: I will
  never have to pdb-step my way through the insanity of
  "components.subscribers" method again.

Nice-to-Have Features
---------------------

- XML-RPC.

- Drag and drop ACE reordering in ACL edit view.

- Ability to add and edit principals in existing ACEs in ACL edit view.

Docs
----

- Document how to override a content registration.  Include an override
  example for the sole purpose of overriding the add view.

- Explain ``after_create`` meta-argument to content.

- Explain __created__ attribute.

- Explain __sdi_deletable__, __sdi_addable__, __sdi_hidden__, __sdi_columns__,
  __sdi_buttons__.

- Explain event listener decorators and add_content_subscriber.

- Explain catalog web UI.

- Narrative docs for reference properties.

- Docstrings for multireference property implementations.

- Explain ``tab_before`` and ``tab_after`` arguments to mgmt_view (as well as
  related ``FIRST``, ``LAST``, and ``MIDDLE`` sentinels).

- Explain "Indexing" view.

- Explain ``NameSchemaNode``, ``PermissionSchemaNode``, and
  ``MultireferenceIdSchemaNode``.

- Explain ``renamer``.

- Explain various view predicates.

- Explain __init__.py include-then-scan done by includeme and how to avoid
  scanning.

- Explain evolution.

- Explain that evolution is baselined at first startup.

- Explain "Workflows" tab.

- Explain exception views for integrity errors.

- Explain that allowed indexes are reindexed when an object's ACL is changed.

- Explain subscribe_acl_modified.

- Explain change_acl.

- Explain "moving" and "duplicating" flags on added and removed events.

- Explain that source-integral PrincipalToACLBearing relationships are set up
  between an ACL-bearing object and the principals referred to within the ACL.

Probably Bad Ideas
------------------

- Create "addable here" API that manages the __sdi_addable__ attribute of a
  folderish object.

- Emit an ObjectMoving event rather than removed event with a moving flag,
  then an add event?

- Create object map management UI (view relationships, view paths, view
  objectids).

